{"version":3,"sources":["Home.js","View.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","state","id","timezone","onChange","bind","onSubmit","event","console","log","this","setState","currentTarget","name","value","history","push","className","htmlFor","type","disabled","length","onClick","Component","withRouter","View","match","params","eventId","ids","App","exact","path","component","render","includes","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yRAIMA,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,GAAI,GACJC,SAAU,OAGZ,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAKC,SAAW,EAAKA,SAASD,KAAd,gBATC,E,qDAYVE,GACPC,QAAQC,IAAIF,GACZG,KAAKC,SAAL,eACGJ,EAAMK,cAAcC,KAAON,EAAMK,cAAcE,U,+BAI3CP,GACPG,KAAKV,MAAMe,QAAQC,KAAnB,gBAAiCN,KAAKT,MAAMC,O,4EAK5C,OACE,0BAAMe,UAAU,aAAhB,OAEE,4BACE,mDACA,mDACA,mDACA,0DAEF,8BACE,2BAAOC,QAAQ,MAAf,YACA,2BACEC,KAAK,OACLN,KAAK,KACLC,MAAOJ,KAAKT,MAAMC,GAClBE,SAAUM,KAAKN,WAEjB,2BAAOc,QAAQ,YAAf,YACA,4BACEL,KAAK,WACLC,MAAOJ,KAAKT,MAAME,SAClBC,SAAUM,KAAKN,UAEf,4BAAQU,MAAM,OAAd,WACA,4BAAQA,MAAM,OAAd,WACA,4BAAQA,MAAM,OAAd,YACA,4BAAQA,MAAM,OAAd,YAEF,4BACEK,KAAK,SACLC,SAAUV,KAAKT,MAAMC,GAAGmB,OAAS,EACjCC,QAASZ,KAAKJ,UAHhB,UAQF,6BAAMI,KAAKT,MAAMC,IACjB,6BAAMQ,KAAKT,MAAME,e,GA/DNoB,aAqEJC,cAAWzB,GCpDX0B,E,kDAjBb,WAAYzB,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,GAHI,E,kGASjB,OACE,0BAAMgB,UAAU,aAAhB,cACcP,KAAKV,MAAM0B,MAAMC,OAAOC,a,GAZzBL,aCGbM,G,MAAM,CAAC,OAAQ,OAAQ,SA6BdC,E,kDA3Bb,WAAY9B,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,GAHI,E,qDAMjB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO8B,OAAK,EAACC,KAAK,IAAIC,UAAWlC,IAEjC,kBAAC,IAAD,CACEiC,KAAK,iBACLE,OAAQ,SAAClC,GAAD,OACN6B,EAAIM,SAASnC,EAAM0B,MAAMC,OAAOC,SAC9B,kBAAC,EAAS5B,GAEV,kBAAC,EAAD,e,GAlBEuB,aCKEa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASb,MACvB,2DCZNc,IAASN,OACP,kBAAC,IAAMO,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3C,QAAQ2C,MAAMA,EAAMC,c","file":"static/js/main.dc644147.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\n// import styled from \"styled-components\";\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      id: \"\",\n      timezone: \"est\",\n    };\n\n    this.onChange = this.onChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  onChange(event) {\n    console.log(event);\n    this.setState({\n      [event.currentTarget.name]: event.currentTarget.value,\n    });\n  }\n\n  onSubmit(event) {\n    this.props.history.push(`/view/${this.state.id}`);\n  }\n  componentDidMount() {}\n\n  render() {\n    return (\n      <main className=\"Home page\">\n        Home\n        <ul>\n          <li>View as 1234 ✅</li>\n          <li>View as 5678 ✅</li>\n          <li>View as aaaa ✅</li>\n          <li>View as xxxx ⚠️</li>\n        </ul>\n        <form>\n          <label htmlFor=\"id\">Event ID</label>\n          <input\n            type=\"text\"\n            name=\"id\"\n            value={this.state.id}\n            onChange={this.onChange}\n          />\n          <label htmlFor=\"timezone\">Timezone</label>\n          <select\n            name=\"timezone\"\n            value={this.state.timezone}\n            onChange={this.onChange}\n          >\n            <option value=\"est\">Eastern</option>\n            <option value=\"cst\">Central</option>\n            <option value=\"mst\">Mountain</option>\n            <option value=\"pst\">Pacific</option>\n          </select>\n          <button\n            type=\"submit\"\n            disabled={this.state.id.length < 3}\n            onClick={this.onSubmit}\n          >\n            Login\n          </button>\n        </form>\n        <div>{this.state.id}</div>\n        <div>{this.state.timezone}</div>\n      </main>\n    );\n  }\n}\n\nexport default withRouter(Home);\n","import React, { Component } from \"react\";\n// import styled from \"styled-components\";\n\nclass View extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {};\n  }\n\n  componentDidMount() {}\n\n  render() {\n    return (\n      <main className=\"View page\">\n        View event {this.props.match.params.eventId}\n      </main>\n    );\n  }\n}\n\nexport default View;\n","import React, { Component } from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport Home from \"./Home\";\nimport View from \"./View\";\nimport \"./App.css\";\n\nconst ids = [\"1234\", \"5678\", \"aaaa\"];\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {};\n  }\n  render() {\n    return (\n      <BrowserRouter>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n\n          <Route\n            path=\"/view/:eventId\"\n            render={(props) =>\n              ids.includes(props.match.params.eventId) ? (\n                <View {...props} />\n              ) : (\n                <Home />\n              )\n            }\n          />\n        </Switch>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}